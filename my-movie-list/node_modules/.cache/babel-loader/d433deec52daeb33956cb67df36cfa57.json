{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './omdbAPI';\nconst initialState = {\n  value: [],\n  searchValue: '',\n  searchLoaded: false,\n  status: 'idle'\n};\nexport const updateAsync = createAsyncThunk('search/fetchData', async data => {\n  const response = await fetchData(data);\n  return response.json();\n});\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    update: (state, action) => {},\n    setSearchValue: (state, action) => ({ ...state,\n      searchValue: state.searchValue.concat(action.payload)\n    }),\n    setSearchLoaded: (state, action) => {\n      state.searchValue = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n    });\n  }\n});\nexport const {\n  update,\n  setSearchValue,\n  setSearchLoaded\n} = searchSlice.actions;\nexport const selectSearchLoaded = state => state.search.searchLoaded;\nexport const selectSearchValue = state => state.search.searchValue;\nexport default searchSlice.reducer;","map":{"version":3,"sources":["/Users/winston/my-movie-list/src/components/searchSlice.js"],"names":["createAsyncThunk","createSlice","fetchData","initialState","value","searchValue","searchLoaded","status","updateAsync","data","response","json","searchSlice","name","reducers","update","state","action","setSearchValue","concat","payload","setSearchLoaded","extraReducers","builder","addCase","pending","fulfilled","actions","selectSearchLoaded","search","selectSearchValue","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,WAAW,EAAE,EAFI;AAGjBC,EAAAA,YAAY,EAAE,KAHG;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;AAOA,OAAO,MAAMC,WAAW,GAAGR,gBAAgB,CACvC,kBADuC,EAEvC,MAAOS,IAAP,IAAgB;AACZ,QAAMC,QAAQ,GAAG,MAAMR,SAAS,CAACO,IAAD,CAAhC;AACA,SAAOC,QAAQ,CAACC,IAAT,EAAP;AACH,CALsC,CAApC;AAQP,OAAO,MAAMC,WAAW,GAAGX,WAAW,CAAC;AACnCY,EAAAA,IAAI,EAAE,QAD6B;AAEnCV,EAAAA,YAFmC;AAGnCW,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB,CAE1B,CAHK;AAINC,IAAAA,cAAc,EAAE,CAACF,KAAD,EAAOC,MAAP,MAAmB,EAC/B,GAAGD,KAD4B;AAE/BX,MAAAA,WAAW,EAAEW,KAAK,CAACX,WAAN,CAAkBc,MAAlB,CAAyBF,MAAM,CAACG,OAAhC;AAFkB,KAAnB,CAJV;AAQNC,IAAAA,eAAe,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACX,WAAN,GAAoBY,MAAM,CAACG,OAA3B;AACH;AAVK,GAHyB;AAenCE,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWhB,WAAW,CAACiB,OADvB,EACiCT,KAAD,IAAW;AACvCA,MAAAA,KAAK,CAACT,MAAN,GAAe,SAAf;AACD,KAHH,EAIGiB,OAJH,CAIWhB,WAAW,CAACkB,SAJvB,EAIkC,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACD,KANH;AAOD;AAvBkC,CAAD,CAA/B;AA0BP,OAAO,MAAM;AAAEQ,EAAAA,MAAF;AAAUG,EAAAA,cAAV;AAA0BG,EAAAA;AAA1B,IAA6CT,WAAW,CAACe,OAA/D;AAEP,OAAO,MAAMC,kBAAkB,GAAIZ,KAAD,IAAWA,KAAK,CAACa,MAAN,CAAavB,YAAnD;AACP,OAAO,MAAMwB,iBAAiB,GAAId,KAAD,IAAWA,KAAK,CAACa,MAAN,CAAaxB,WAAlD;AAEP,eAAeO,WAAW,CAACmB,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './omdbAPI';\n\nconst initialState = {\n    value: [],\n    searchValue: '',\n    searchLoaded: false,\n    status: 'idle'\n};\n\nexport const updateAsync = createAsyncThunk(\n    'search/fetchData',\n    async (data) => {\n        const response = await fetchData(data);\n        return response.json();\n    }\n);\n\nexport const searchSlice = createSlice({\n    name: 'search',\n    initialState,\n    reducers: {\n        update: (state, action) => {\n\n        },\n        setSearchValue: (state,action) => ({\n            ...state,\n            searchValue: state.searchValue.concat(action.payload)\n        }),\n        setSearchLoaded: (state, action) => {\n            state.searchValue = action.payload;\n        },\n    },\n    extraReducers: (builder) => {\n      builder\n        .addCase(updateAsync.pending, (state) => {\n          state.status = 'loading';\n        })\n        .addCase(updateAsync.fulfilled, (state, action) => {\n          state.status = 'idle';\n        });\n    },\n  });\n\nexport const { update, setSearchValue, setSearchLoaded} = searchSlice.actions;\n\nexport const selectSearchLoaded = (state) => state.search.searchLoaded;\nexport const selectSearchValue = (state) => state.search.searchValue;\n\nexport default searchSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}