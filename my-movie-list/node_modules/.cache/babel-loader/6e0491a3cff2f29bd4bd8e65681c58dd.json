{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './omdbAPI';\nconst initialState = {\n  result: false,\n  predictions: false,\n  searchValue: '',\n  searchLoaded: false,\n  status: 'idle'\n};\nexport const updateAsyncPredictions = createAsyncThunk('search/fetchData', async data => {\n  const response = await fetchData(data);\n  return response.json();\n});\nexport const updateAsyncResult = createAsyncThunk('search/fetchData2', async data => {\n  const response = await fetchData(data);\n  return response.json();\n});\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    update: (state, action) => {},\n    setSearchValue: (state, action) => ({ ...state,\n      searchValue: state.searchValue.concat(action.payload)\n    }),\n    removeSearchValue: state => ({ ...state,\n      searchValue: state.searchValue.substring(0, state.searchValue.length > 0 ? state.searchValue.length - 1 : 0)\n    }),\n    setSearchLoaded: (state, action) => {\n      state.searchLoaded = action.payload;\n    },\n    clearSearchValue: state => {\n      state.searchValue = '';\n    },\n    clearPredictions: state => {\n      state.predictions = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateAsyncPredictions.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsyncPredictions.fulfilled, (state, action) => {\n      console.log('yep');\n      state.status = 'idle';\n      state.predictions = action.payload;\n    });\n  },\n  extraReducers: builder => {\n    builder.addCase(updateAsyncResult.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsyncResult.fulfilled, (state, action) => {\n      console.log('why');\n      state.status = 'idle';\n      state.result = action.payload;\n    });\n  }\n});\nexport const {\n  update,\n  setSearchValue,\n  setSearchLoaded,\n  clearSearchValue,\n  removeSearchValue,\n  clearPredictions\n} = searchSlice.actions;\nexport const selectPredictions = state => state.search.predictions;\nexport const selectSearchLoaded = state => state.search.searchLoaded;\nexport const selectSearchValue = state => state.search.searchValue;\nexport default searchSlice.reducer;","map":{"version":3,"sources":["/Users/winston/my-movie-list/src/components/searchSlice.js"],"names":["createAsyncThunk","createSlice","fetchData","initialState","result","predictions","searchValue","searchLoaded","status","updateAsyncPredictions","data","response","json","updateAsyncResult","searchSlice","name","reducers","update","state","action","setSearchValue","concat","payload","removeSearchValue","substring","length","setSearchLoaded","clearSearchValue","clearPredictions","extraReducers","builder","addCase","pending","fulfilled","console","log","actions","selectPredictions","search","selectSearchLoaded","selectSearchValue","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './omdbAPI';\n\nconst initialState = {\n    result: false,\n    predictions: false,\n    searchValue: '',\n    searchLoaded: false,\n    status: 'idle'\n};\n\nexport const updateAsyncPredictions = createAsyncThunk(\n    'search/fetchData',\n    async (data) => {\n        const response = await fetchData(data);\n        return response.json();\n    }\n);\n\nexport const updateAsyncResult = createAsyncThunk(\n    'search/fetchData2',\n    async (data) => {\n        const response = await fetchData(data);\n        return response.json();\n    }\n);\n\nexport const searchSlice = createSlice({\n    name: 'search',\n    initialState,\n    reducers: {\n        update: (state, action) => {\n            \n        },\n        setSearchValue: (state,action) => ({\n            ...state,\n            searchValue: state.searchValue.concat(action.payload)\n        }),\n        removeSearchValue: (state) => ({\n            ...state,\n            searchValue: state.searchValue.substring(0, state.searchValue.length > 0 ?\n                                                        state.searchValue.length-1 : 0)\n        }),\n        setSearchLoaded: (state, action) => {\n            state.searchLoaded = action.payload;\n        },\n        clearSearchValue: (state) => {\n            state.searchValue = '';\n        },\n        clearPredictions: (state) =>{\n            state.predictions = false;\n        }\n    },\n    extraReducers: (builder) => {\n      builder\n        .addCase(updateAsyncPredictions.pending, (state) => {\n          state.status = 'loading';\n        })\n        .addCase(updateAsyncPredictions.fulfilled, (state, action) => {\n          console.log('yep')\n          state.status = 'idle';\n          state.predictions = action.payload;\n        });\n    },\n    extraReducers: (builder) => {\n        builder\n          .addCase(updateAsyncResult.pending, (state) => {\n            state.status = 'loading';\n          })\n          .addCase(updateAsyncResult.fulfilled, (state, action) => {\n            console.log('why')\n            state.status = 'idle';\n            state.result = action.payload;\n          });\n      },\n  });\n\nexport const { update, setSearchValue, setSearchLoaded, clearSearchValue, removeSearchValue, clearPredictions} = searchSlice.actions;\n\nexport const selectPredictions = (state) => state.search.predictions;\nexport const selectSearchLoaded = (state) => state.search.searchLoaded;\nexport const selectSearchValue = (state) => state.search.searchValue;\n\nexport default searchSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}