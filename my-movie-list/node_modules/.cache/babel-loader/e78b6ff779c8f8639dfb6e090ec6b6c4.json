{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData, fetchNewUser, postData } from './omdbAPI';\nconst initialState = {\n  userID: -1,\n  result: false,\n  predictions: false,\n  searchValue: '',\n  searchLoaded: false,\n  resultRatings: [],\n  status: 'idle'\n};\nexport const updateAsyncPredictions = createAsyncThunk('search/fetchData', async data => {\n  const response = await fetchData(data);\n  return response.json();\n});\nexport const updateAsyncResult = createAsyncThunk('search/fetchData2', async data => {\n  const response = await fetchData(data);\n  return response.json();\n});\nexport const updateAsyncNewUser = createAsyncThunk('search/fetchData3', async data => {\n  const response = await fetchNewUser(data);\n  return response.json();\n});\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    setUserID: (state, action) => {\n      state.userID = action.payload;\n    },\n    setSearchValue: (state, action) => {\n      state.searchValue = action.payload;\n    },\n    concatSearchValue: (state, action) => ({ ...state,\n      searchValue: state.searchValue.concat(action.payload)\n    }),\n    removeSearchValue: state => ({ ...state,\n      searchValue: state.searchValue.substring(0, state.searchValue.length > 0 ? state.searchValue.length - 1 : 0)\n    }),\n    setSearchLoaded: (state, action) => {\n      state.searchLoaded = action.payload;\n    },\n    clearSearchValue: state => {\n      state.searchValue = '';\n    },\n    clearPredictions: state => {\n      state.predictions = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateAsyncPredictions.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsyncPredictions.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.predictions = action.payload;\n    }).addCase(updateAsyncResult.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsyncResult.fulfilled, (state, action) => {\n      console.log('NICE JOB MAN UR ALMOST', action.payload.Rating);\n      state.status = 'idle';\n      state.result = action.payload;\n      state.resultRatings = action.payload.Rating;\n    }).addCase(updateAsyncNewUser.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsyncNewUser.fulfilled, (state, action) => {\n      state.status = 'idle';\n      console.log('new user', action.payload.data);\n      state.userID = action.payload.data;\n      localStorage.setItem('userID', action.payload.data);\n    });\n  }\n});\nexport const {\n  setSearchValue,\n  concatSearchValue,\n  setSearchLoaded,\n  clearSearchValue,\n  removeSearchValue,\n  clearPredictions,\n  setUserID\n} = searchSlice.actions;\nexport const selectResult = state => state.search.result;\nexport const selectPredictions = state => state.search.predictions;\nexport const selectSearchLoaded = state => state.search.searchLoaded;\nexport const selectSearchValue = state => state.search.searchValue;\nexport const selectResultRatings = state => state.search.resultRatings;\nexport const selectUserID = state => state.search.userID;\nexport default searchSlice.reducer;","map":{"version":3,"sources":["/Users/winston/my-movie-list/src/components/searchSlice.js"],"names":["createAsyncThunk","createSlice","fetchData","fetchNewUser","postData","initialState","userID","result","predictions","searchValue","searchLoaded","resultRatings","status","updateAsyncPredictions","data","response","json","updateAsyncResult","updateAsyncNewUser","searchSlice","name","reducers","setUserID","state","action","payload","setSearchValue","concatSearchValue","concat","removeSearchValue","substring","length","setSearchLoaded","clearSearchValue","clearPredictions","extraReducers","builder","addCase","pending","fulfilled","console","log","Rating","localStorage","setItem","actions","selectResult","search","selectPredictions","selectSearchLoaded","selectSearchValue","selectResultRatings","selectUserID","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData, fetchNewUser, postData } from './omdbAPI';\n\nconst initialState = {\n    userID: -1,\n    result: false,\n    predictions: false,\n    searchValue: '',\n    searchLoaded: false,\n    resultRatings: [],\n    status: 'idle'\n};\n\nexport const updateAsyncPredictions = createAsyncThunk(\n    'search/fetchData',\n    async (data) => {\n        const response = await fetchData(data);\n        return response.json();\n    }\n);\n\nexport const updateAsyncResult = createAsyncThunk(\n    'search/fetchData2',\n    async (data) => {\n        const response = await fetchData(data);\n        return response.json();\n    }\n);\n\nexport const updateAsyncNewUser = createAsyncThunk(\n    'search/fetchData3',\n    async (data) => {\n        const response = await fetchNewUser(data);\n        return response.json();\n    }\n);\n\nexport const searchSlice = createSlice({\n    name: 'search',\n    initialState,\n    reducers: {\n        setUserID: (state, action) => {\n            state.userID = action.payload;\n        },\n        setSearchValue: (state, action) => {\n            state.searchValue = action.payload;\n        },\n        concatSearchValue: (state,action) => ({\n            ...state,\n            searchValue: state.searchValue.concat(action.payload)\n        }),\n        removeSearchValue: (state) => ({\n            ...state,\n            searchValue: state.searchValue.substring(0, state.searchValue.length > 0 ?\n                                                        state.searchValue.length-1 : 0)\n        }),\n        setSearchLoaded: (state, action) => {\n            state.searchLoaded = action.payload;\n        },\n        clearSearchValue: (state) => {\n            state.searchValue = '';\n        },\n        clearPredictions: (state) =>{\n            state.predictions = false;\n        }\n    },\n    extraReducers: (builder) => {\n      builder\n        .addCase(updateAsyncPredictions.pending, (state) => {\n          state.status = 'loading';\n        })\n        .addCase(updateAsyncPredictions.fulfilled, (state, action) => {\n          state.status = 'idle';\n          state.predictions = action.payload;\n        })\n        .addCase(updateAsyncResult.pending, (state) => {\n            state.status = 'loading';\n        })\n        .addCase(updateAsyncResult.fulfilled, (state, action) => {\n            console.log('NICE JOB MAN UR ALMOST',action.payload.Rating)\n            state.status = 'idle';\n            state.result = action.payload;\n            state.resultRatings = action.payload.Rating;\n        })\n        .addCase(updateAsyncNewUser.pending, (state) => {\n            state.status = 'loading';\n        })\n        .addCase(updateAsyncNewUser.fulfilled, (state, action) => {\n            state.status = 'idle';\n            console.log('new user', action.payload.data);\n            state.userID = action.payload.data;\n            localStorage.setItem('userID', action.payload.data);\n        });\n    },\n  });\n\nexport const { setSearchValue,concatSearchValue, setSearchLoaded, clearSearchValue, removeSearchValue, clearPredictions, setUserID} = searchSlice.actions;\n\nexport const selectResult = (state) => state.search.result;\nexport const selectPredictions = (state) => state.search.predictions;\nexport const selectSearchLoaded = (state) => state.search.searchLoaded;\nexport const selectSearchValue = (state) => state.search.searchValue;\nexport const selectResultRatings = (state) => state.search.resultRatings;\nexport const selectUserID = (state) => state.search.userID;\n\nexport default searchSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}