{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData, fetchRatingData, postData } from './omdbAPI';\nconst initialState = {\n  result: false,\n  predictions: false,\n  searchValue: '',\n  searchLoaded: false,\n  resultRatings: [],\n  status: 'idle'\n};\nexport const updateAsyncPredictions = createAsyncThunk('search/fetchData', async data => {\n  const response = await fetchData(data);\n  return response.json();\n});\nexport const updateAsyncResult = createAsyncThunk('search/fetchData2', async data => {\n  const response = await fetchData(data);\n  return response.json();\n});\nexport const updateAsyncRatings = createAsyncThunk('search/fetchData3', async data => {\n  const response = await fetchRatingData(data);\n  return response.json();\n});\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    setSearchValue: (state, action) => {\n      state.searchValue = action.payload;\n    },\n    concatSearchValue: (state, action) => ({ ...state,\n      searchValue: state.searchValue.concat(action.payload)\n    }),\n    removeSearchValue: state => ({ ...state,\n      searchValue: state.searchValue.substring(0, state.searchValue.length > 0 ? state.searchValue.length - 1 : 0)\n    }),\n    setSearchLoaded: (state, action) => {\n      state.searchLoaded = action.payload;\n    },\n    clearSearchValue: state => {\n      state.searchValue = '';\n    },\n    clearPredictions: state => {\n      state.predictions = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateAsyncPredictions.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsyncPredictions.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.predictions = action.payload;\n    }).addCase(updateAsyncResult.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsyncResult.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.result = action.payload;\n      state.resultRatings = [];\n    }).addCase(updateAsyncRatings.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsyncRatings.fulfilled, (state, action) => ({ ...state,\n      resultRatings: state.resultRatings.concat(action.payload)\n    }));\n  }\n});\nexport const {\n  setSearchValue,\n  concatSearchValue,\n  setSearchLoaded,\n  clearSearchValue,\n  removeSearchValue,\n  clearPredictions\n} = searchSlice.actions;\nexport const selectResult = state => state.search.result;\nexport const selectPredictions = state => state.search.predictions;\nexport const selectSearchLoaded = state => state.search.searchLoaded;\nexport const selectSearchValue = state => state.search.searchValue;\nexport const selectResultRatings = state => state.search.resultRatings;\nexport default searchSlice.reducer;","map":{"version":3,"sources":["/Users/winston/my-movie-list/src/components/searchSlice.js"],"names":["createAsyncThunk","createSlice","fetchData","fetchRatingData","postData","initialState","result","predictions","searchValue","searchLoaded","resultRatings","status","updateAsyncPredictions","data","response","json","updateAsyncResult","updateAsyncRatings","searchSlice","name","reducers","setSearchValue","state","action","payload","concatSearchValue","concat","removeSearchValue","substring","length","setSearchLoaded","clearSearchValue","clearPredictions","extraReducers","builder","addCase","pending","fulfilled","actions","selectResult","search","selectPredictions","selectSearchLoaded","selectSearchValue","selectResultRatings","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData, fetchRatingData, postData } from './omdbAPI';\n\nconst initialState = {\n    result: false,\n    predictions: false,\n    searchValue: '',\n    searchLoaded: false,\n    resultRatings: [],\n    status: 'idle'\n};\n\nexport const updateAsyncPredictions = createAsyncThunk(\n    'search/fetchData',\n    async (data) => {\n        const response = await fetchData(data);\n        return response.json();\n    }\n);\n\nexport const updateAsyncResult = createAsyncThunk(\n    'search/fetchData2',\n    async (data) => {\n        const response = await fetchData(data);\n        return response.json();\n    }\n);\n\nexport const updateAsyncRatings = createAsyncThunk(\n    'search/fetchData3',\n    async (data) => {\n        const response = await fetchRatingData(data);\n        return response.json();\n    }\n);\n\nexport const searchSlice = createSlice({\n    name: 'search',\n    initialState,\n    reducers: {\n        setSearchValue: (state, action) => {\n            state.searchValue = action.payload;\n        },\n        concatSearchValue: (state,action) => ({\n            ...state,\n            searchValue: state.searchValue.concat(action.payload)\n        }),\n        removeSearchValue: (state) => ({\n            ...state,\n            searchValue: state.searchValue.substring(0, state.searchValue.length > 0 ?\n                                                        state.searchValue.length-1 : 0)\n        }),\n        setSearchLoaded: (state, action) => {\n            state.searchLoaded = action.payload;\n        },\n        clearSearchValue: (state) => {\n            state.searchValue = '';\n        },\n        clearPredictions: (state) =>{\n            state.predictions = false;\n        }\n    },\n    extraReducers: (builder) => {\n      builder\n        .addCase(updateAsyncPredictions.pending, (state) => {\n          state.status = 'loading';\n        })\n        .addCase(updateAsyncPredictions.fulfilled, (state, action) => {\n          state.status = 'idle';\n          state.predictions = action.payload;\n        })\n        .addCase(updateAsyncResult.pending, (state) => {\n            state.status = 'loading';\n        })\n        .addCase(updateAsyncResult.fulfilled, (state, action) => {\n            state.status = 'idle';\n            state.result = action.payload;\n            state.resultRatings = [];\n        })\n        .addCase(updateAsyncRatings.pending, (state) => {\n            state.status = 'loading';\n        })\n        .addCase(updateAsyncRatings.fulfilled, (state, action) => ({\n            ...state,\n            resultRatings: state.resultRatings.concat(action.payload)\n        }));\n    },\n  });\n\nexport const { setSearchValue,concatSearchValue, setSearchLoaded, clearSearchValue, removeSearchValue, clearPredictions} = searchSlice.actions;\n\nexport const selectResult = (state) => state.search.result;\nexport const selectPredictions = (state) => state.search.predictions;\nexport const selectSearchLoaded = (state) => state.search.searchLoaded;\nexport const selectSearchValue = (state) => state.search.searchValue;\nexport const selectResultRatings = (state) => state.search.resultRatings;\n\nexport default searchSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}