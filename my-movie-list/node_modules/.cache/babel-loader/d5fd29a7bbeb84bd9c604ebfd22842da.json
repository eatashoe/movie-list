{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './omdbAPI';\nconst initialState = {\n  result: false,\n  predictions: false,\n  searchValue: '',\n  searchLoaded: false,\n  status: 'idle'\n};\nexport const updateAsync = createAsyncThunk('search/fetchData', async data => {\n  const response = await fetchData(data.data);\n  return {\n    type: data.type,\n    response: response.json()\n  };\n});\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState,\n  reducers: {\n    update: (state, action) => {},\n    setSearchValue: (state, action) => ({ ...state,\n      searchValue: state.searchValue.concat(action.payload)\n    }),\n    removeSearchValue: state => ({ ...state,\n      searchValue: state.searchValue.substring(0, state.searchValue.length > 0 ? state.searchValue.length - 1 : 0)\n    }),\n    setSearchLoaded: (state, action) => {\n      state.searchLoaded = action.payload;\n    },\n    clearSearchValue: state => {\n      state.searchValue = '';\n    },\n    clearPredictions: state => {\n      state.predictions = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n\n      if (action.payload.type === \"Predictions\") {\n        state.predictions = action.payload.response;\n      } else if (action.payload.type === \"Result\") {\n        state.result = action.payload.response;\n      }\n    });\n  }\n});\nexport const {\n  update,\n  setSearchValue,\n  setSearchLoaded,\n  clearSearchValue,\n  removeSearchValue,\n  clearPredictions\n} = searchSlice.actions;\nexport const selectPredictions = state => state.search.predictions;\nexport const selectSearchLoaded = state => state.search.searchLoaded;\nexport const selectSearchValue = state => state.search.searchValue;\nexport default searchSlice.reducer;","map":{"version":3,"sources":["/Users/winston/my-movie-list/src/components/searchSlice.js"],"names":["createAsyncThunk","createSlice","fetchData","initialState","result","predictions","searchValue","searchLoaded","status","updateAsync","data","response","type","json","searchSlice","name","reducers","update","state","action","setSearchValue","concat","payload","removeSearchValue","substring","length","setSearchLoaded","clearSearchValue","clearPredictions","extraReducers","builder","addCase","pending","fulfilled","actions","selectPredictions","search","selectSearchLoaded","selectSearchValue","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchData } from './omdbAPI';\n\nconst initialState = {\n    result: false,\n    predictions: false,\n    searchValue: '',\n    searchLoaded: false,\n    status: 'idle'\n};\n\nexport const updateAsync = createAsyncThunk(\n    'search/fetchData',\n    async (data) => {\n        const response = await fetchData(data.data);\n        return {\n            type: data.type,\n            response: response.json()\n        };\n    }\n);\n\nexport const searchSlice = createSlice({\n    name: 'search',\n    initialState,\n    reducers: {\n        update: (state, action) => {\n            \n        },\n        setSearchValue: (state,action) => ({\n            ...state,\n            searchValue: state.searchValue.concat(action.payload)\n        }),\n        removeSearchValue: (state) => ({\n            ...state,\n            searchValue: state.searchValue.substring(0, state.searchValue.length > 0 ?\n                                                        state.searchValue.length-1 : 0)\n        }),\n        setSearchLoaded: (state, action) => {\n            state.searchLoaded = action.payload;\n        },\n        clearSearchValue: (state) => {\n            state.searchValue = '';\n        },\n        clearPredictions: (state) =>{\n            state.predictions = false;\n        }\n    },\n    extraReducers: (builder) => {\n      builder\n        .addCase(updateAsync.pending, (state) => {\n          state.status = 'loading';\n        })\n        .addCase(updateAsync.fulfilled, (state, action) => {\n          state.status = 'idle';\n          if(action.payload.type === \"Predictions\"){\n            state.predictions = action.payload.response;\n          }\n          else if(action.payload.type === \"Result\"){\n            state.result = action.payload.response;\n          }\n          \n        });\n    },\n  });\n\nexport const { update, setSearchValue, setSearchLoaded, clearSearchValue, removeSearchValue, clearPredictions} = searchSlice.actions;\n\nexport const selectPredictions = (state) => state.search.predictions;\nexport const selectSearchLoaded = (state) => state.search.searchLoaded;\nexport const selectSearchValue = (state) => state.search.searchValue;\n\nexport default searchSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}